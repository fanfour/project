{
    "collab_server" : "",
    "contents" : "library(\"parallelMap\")\nlibrary(mlr)\nlibrary(sqldf)\nset.seed(42)\noptions(scipen = 999)\n\n\n#Installations necessary?\nif(FALSE){\n  install.packages(\"penalized\")\n  install.packages(\"C50\")\n  install.packages(\"randomForest\")\n  install.packages(\"adabag\")\n}\n\n#DATA IMPORT AND PREPARATION\noriginalDataImport = function(folder){\n  \n  train_org = read.csv(paste(folder, \"train.csv\", sep = \"\"), sep = \"|\", header = TRUE, dec = \".\")\n  items = read.csv(paste(folder, \"items.csv\", sep = \"\"), sep = \"|\", header = TRUE, dec = \".\")\n  \n  train_org[is.na(train_org)] = 0\n  items[is.na(items)] = \"MISSING\"\n  levels(items$campaignIndex)[1] = \"MISSING\"\n  \n  train_org = subset(sqldf(\"select * from train_org join items on train_org.pid = items.pid\"), select = -c(3))\n  \n  #Remove false predictors\n  train_org = subset(train_org, select = -c(pid, lineID, order, click, basket))\n  \n  #factor data\n  train_org.factor = c(\"adFlag\", \"availability\", \"manufacturer\", \"group\", \"content\", \"unit\", \n                       \"genericProduct\", \"salesIndex\", \"category\", \"campaignIndex\")\n  \n  for(i in train_org.factor){\n    train_org[i] = as.factor(train_org[[i]])\n  }\n  \n  return(train_org)\n}\nprepDataImport = function(folder){\n  train = read.csv2(paste(folder), \"final_sample.csv\")\n  \n  #Remove false predictors\n  train = subset(train, select = -c(lineID, pid, order, quantity))\n  \n  #MISSING VALUE HANDLING\n  train$relativediff_comp_price[is.infinite((train$relativediff_comp_price))] = 0\n  train$relativediff_rrp_comp[is.infinite((train$relativediff_rrp_comp))] = 0\n  levels(train$campaignIndex)[1] = \"MISSING\"\n  \n  train.factor_fix = c(\"adFlag\", \"availability\", \"genericProduct\", \"salesIndex\", \n                       \"campaignIndex\", \"weekdays\", \"missingCompetitorPrice\", \"ABC_rev\", \"ABC_dem\")\n  \n  train.factor_rem = c(\"manufacturer\", \"category\", \"contentContainsX\", \"unitClean\")\n  \n  train.factor = c(train.factor_fix, train.factor_rem)\n  \n  for(i in train.factor){\n    train[i] = as.factor(train[[i]])\n  }\n  \n  return(train)\n}\nsets = list(originalDataImport(\"01_Data/\"), prepDataImport(\"01_Data/\"))\n\nremoveIDLikeFactors = function(listSets, maxNrFactors){\n  #Remove all factorial attributes with nr(factors) > 50\n  for(i in c(1:length(listSets))){\n    test = colnames(listSets[[i]][, sapply(listSets[[i]], is.factor)])\n    \n    rem = c(NULL)\n    for(j in test){\n      if(length(table(listSets[[i]][j])) > maxNrFactors)\n        rem = c(rem, j)\n    }\n    \n    listSets[[i]] = listSets[[i]][, (! colnames(listSets[[i]]) %in% rem)]\n  }\n  return(listSets)\n}\nsets = removeIDLikeFactors(sets, 50)\n\n#DUMMY CODING\nfor(i in c(1:length(sets))){\n  sets[[i]] = createDummyFeatures(sets[[i]], target = (\"revenue\"))\n}\n\n\n#Sample selection\n#Get uniform sample\nuniformSampling = function(listSets, size){\n  row_sample = sample(rownames(listSets[[1]]), size)\n  \n  for(i in c(1:length(listSets))){\n    listSets[[i]] = listSets[[i]][row_sample,]\n  }\n  return(listSets)\n}\nsets = uniformSampling(sets, 20000)\n\n#MODEL PREPARATION\nrdesc = makeResampleDesc(\"CV\", iters = 3)\n#learner selection\nlearners = list(makeLearner(\"regr.lm\"),\n                makeFeatSelWrapper(\"regr.glm\", resampling = rdesc, control = makeFeatSelControlGA(maxit = 20, mutation.rate = 0.1)))\n\n#parameter_sets if necessary\n#getParamSet(\"classif.penalized.lasso\")\n#lasso.learner = makeLearner(\"regr.penalized.lasso\")\n#lasso.learner = setHyperPars(lasso.learner, lambda1 = 20, trace = TRUE)\n#lasso.wrapper = makeFeatSelWrapper(lasso.learner, resampling = rdesc, control = makeFeatSelControlGA(maxit = 20, mutation.rate = 0.1))\n#learners = append(learners, list(lasso.wrapper))\n\n#make tasks\nmakeTasks = function(listSets, target){\n  tasks = list()\n  \n  for(i in c(1:length(listSets))){\n    tasks = append(tasks, list(makeRegrTask(id = as.character(i), data = listSets[[i]], target = target)))\n  }\n  \n  return(tasks)\n}\ntasks = makeTasks(sets, \"revenue\")\n\n#RESAMPLING / TESTING DECSISION\nrdesc2 = makeResampleDesc(\"CV\", iters = 5)\n\n#EVALUATION\n#parralization\n#parallelStartBatchJobs()\n#parallelStartSocket(4, level = \"mlr.resample\")\n#Setting up a benchmarking experiment\n\nbmr = benchmark(learners, tasks, rdesc2, list(rmse))\n\n#parallelStop()\nwrite.csv(bmr, \"test_regr.csv\")\n\n#Final evaluation of the models\n#MSE\n",
    "created" : 1494164973462.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1634624392",
    "id" : "3BD59589",
    "lastKnownWriteTime" : 1494164867,
    "last_content_update" : 1494164867,
    "path" : "~/Studium/SS17/DMC17/git/DMC/final_reg.R",
    "project_path" : "final_reg.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}